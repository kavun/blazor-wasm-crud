@page "/edit/{Id:guid}"

@using People.Shared.People;
@using PeopleBlazorWasm.Shared.People;

@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Edit @TitleName</PageTitle>

<h1>Edit @TitleName</h1>

<People.BlazorWasmClient.Components.Errors ErrorList=@errors />
<form @onsubmit="EditPerson">
    <People.BlazorWasmClient.Components.PersonDetails Person=@person Disabled=@loading />
    <div class="mt-3 space-between">
        <div>
            <button class="btn btn-primary" type="submit" disabled=@loading>Save</button>
        </div>
        <div>
            <a class="btn" href="/" disabled=@loading>Cancel</a>
            <button class="btn btn-danger" type="button" disabled=@loading @onclick=DeletePerson>Delete</button>
        </div>
    </div>
</form>

@code {
    PersonAddEditRequest person = new();
    List<string> errors = new();
    bool loading = true;
    string TitleName => person?.Name ?? "Person";

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            errors.Clear();
            var response = await Http.GetFromJsonAsync<PersonAddEditResponse>($"api/people/{Id}");
            if (response is null || response.Person is null)
            {
                errors.Add("An error occurred.");
                return;
            }

            person = new PersonAddEditRequest()
            {
                Name = response.Person.Name,
                Street = response.Person.Address.Street,
                City = response.Person.Address.City,
                State = response.Person.Address.State,
                Zip = response.Person.Address.Zip,
                Phone = response.Person.Phone,
                Birth = new DateOnly(response.Person.Birth.Year, response.Person.Birth.Month, response.Person.Birth.Day)
            };
        }
        finally
        {
            loading = false;
        }
    }

    private async Task EditPerson()
    {
        loading = true;
        try
        {
            errors.Clear();
            var response = await Http.PutAsJsonAsync<PersonAddEditRequest>($"/api/people/{Id}", person);
            var content = await response.Content.ReadFromJsonAsync<PersonAddEditResponse>();
            if (content == null)
            {
                errors.Add("An error occurred.");
                return;
            }

            if (content.Error)
            {
                errors.AddRange(content.Errors.Errors.Select(e => e.Message));
                return;
            }

            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo("/");
        }
        finally
        {
            loading = false;
        }
    }


    async Task DeletePerson()
    {
        loading = true;
        try
        {
            errors.Clear();
            var response = await Http.DeleteAsync($"/api/people/{Id}");
            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo("/");
        }
        finally
        {
            loading = false;
        }
    }
}
