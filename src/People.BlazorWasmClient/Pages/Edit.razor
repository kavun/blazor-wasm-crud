@page "/edit/{Id:guid}"

@using People.BlazorWasmClient.Services;
@using People.Shared.People;

@inject NavigationManager Navigation
@inject PeopleApiClient PeopleApiClient

<PageTitle>Edit @TitleName</PageTitle>

<h1>Edit @TitleName</h1>

<Errors ErrorList=@resource.Errors />
<form @onsubmit="EditPerson">
    <PersonDetails Person=@person Disabled=@resource.Loading />
    <div class="mt-3 space-between">
        <div>
            <button class="btn btn-primary" type="submit" disabled=@resource.Loading>Save</button>
        </div>
        <div>
            <a class="btn" href="/" disabled=@resource.Loading>Cancel</a>
            <button class="btn btn-danger" type="button" disabled=@resource.Loading @onclick=DeletePerson>Delete</button>
        </div>
    </div>
</form>

@code {
    PersonAddEditRequest person = new();
    string TitleName => person?.Name ?? "Person";
    LoadableResource resource = new();

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await resource.TryInvoke(async () =>
        {
            var response = await PeopleApiClient.GetPerson(Id);

            if (response is null || response.Content is null || response.Content.Person is null)
            {
                resource.Errors.Add("An error occurred.");
                return;
            }

            response.HttpResponseMessage.EnsureSuccessStatusCode();

            person = response.Content.ToAddEditRequest();
        });
    }

    private async Task EditPerson()
    {
        await resource.TryInvoke(async () =>
        {
            var response = await PeopleApiClient.PutPerson(Id, person);
            if (response is null || response.Content is null)
            {
                resource.Errors.Add("An error occurred.");
                return;
            }

            if (response.Content.Error)
            {
                resource.Errors.AddRange(response.Content.Errors.Errors.Select(e => e.Message));
                return;
            }

            response.HttpResponseMessage.EnsureSuccessStatusCode();

            Navigation.NavigateTo("/");
        });
    }


    async Task DeletePerson()
    {
        await resource.TryInvoke(async () =>
        {
            var response = await PeopleApiClient.DeletePerson(Id);
            if (response is null)
            {
                resource.Errors.Add("An error occurred.");
                return;
            }

            response.EnsureSuccessStatusCode();

            Navigation.NavigateTo("/");
        });
    }
}
