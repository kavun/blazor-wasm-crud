@page "/"

@using People.BlazorWasmClient.Services;
@using People.Shared.People;

@inject IClientClock Clock
@inject PeopleApiClient PeopleApiClient

<PageTitle>People</PageTitle>

<h1>People</h1>

@if (people == null)
{
    <p><em>Loading people...</em></p>
}
else if (people.Length == 0)
{
    <div class="alert alert-info" role="alert">No people yet.</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Birthday</th>
                <th>Phone</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td><a disabled=@resource.Loading href="/edit/@person.Id">@person.Name</a></td>
                    <td><Address AddressResponse="@person.Address" /></td>
                    <td><Birthday BirthDateTime="@person.Birth" /></td>
                    <td>@person.Phone</td>
                    <td>
                        <a disabled=@resource.Loading href="/edit/@person.Id" class="btn btn-sm btn-primary">Edit</a>
                        <button disabled=@resource.Loading type="button" class="btn btn-sm btn-danger" @onclick=@(e => DeletePerson(person.Id))>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PersonResponse[]? people;
    LoadableResource resource = new();

    protected override async Task OnInitializedAsync()
    {
        await GetPeople();
    }

    async Task GetPeople()
    {
        await resource.TryInvoke(async () =>
        {
            var response = await PeopleApiClient.GetPeople();

            response.HttpResponseMessage.EnsureSuccessStatusCode();

            people = response.Content;
        });
    }

    async Task DeletePerson(Guid id)
    {
        await resource.TryInvoke(async () =>
        {
            if (people is null || people.Length < 1)
            {
                return;
            }

            var response = await PeopleApiClient.DeletePerson(id);

            response.EnsureSuccessStatusCode();

            people = people.Where(p => p.Id != id).ToArray();
        });
    }
}
